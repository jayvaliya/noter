// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  notes         Note[]
  bookmarks     Bookmark[]
  folders       Folder[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Note {
  id        String     @id @default(cuid())
  title     String
  content   String     @db.Text
  isPublic  Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  bookmarks Bookmark[]
  folderId  String?
  folder    Folder?    @relation(fields: [folderId], references: [id], onDelete: SetNull)

  @@index([authorId])
  @@index([folderId])
}

model Bookmark {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  note      Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId    String
  createdAt DateTime @default(now())

  @@unique([userId, noteId])
  @@index([userId])
  @@index([noteId])
}

model Folder {
  id        String   @id @default(cuid())
  name      String
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  // Self-relation for folder hierarchy
  parent     Folder?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  parentId   String?
  subfolders Folder[] @relation("FolderHierarchy")

  // Notes in this folder
  notes Note[]

  @@index([authorId])
  @@index([parentId])
}
